{
 "cells": [
  {
   "cell_type": "raw",
   "id": "c9d75386",
   "metadata": {},
   "source": [
    "Calculando el salario semanal\n",
    "Un vendedor gana un salario base de $500 más una comisión del 10% sobre sus\n",
    "ventas totales. Escribe un programa donde se pueda ingresar el monto de las ventas\n",
    "totales del vendedor y calcule su salario total."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6455c455",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ingrese el monto de las ventas totales: 500\n"
     ]
    }
   ],
   "source": [
    "#solicitar al usuario el total del monto mensual\n",
    "ventas_totales = float(input(\"ingrese el monto de las ventas totales: \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bffbd925",
   "metadata": {},
   "outputs": [],
   "source": [
    "#definiremos el sueldo y la comision base\n",
    "sueldo_base = 500\n",
    "tasa_base = 0.10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "55d9f6ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculo de la comision por venta mensual\n",
    "comision = ventas_totales * tasa_base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "56c7068e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculamos el sueldo mensual incluyendo la comision\n",
    "sueldo = sueldo_base + comision"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "93493745",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "su sueldo total + comision es: $ 550.0\n"
     ]
    }
   ],
   "source": [
    "#le indicamos al usuario cuanto sera su sueldo\n",
    "print(\"su sueldo total + comision es: $\",sueldo)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66960d5a",
   "metadata": {},
   "source": [
    "# ejercicio 2\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "027dbf00",
   "metadata": {},
   "source": [
    "Bienvenido a la frutería virtual\n",
    "En este ejercicio, vamos a crear un diccionario vacío llamado catalogo_frutas {'fruta':\n",
    "precio} y agregar algunas frutas con sus precios. Luego, le pediremos al usuario que\n",
    "ingrese el nombre de una fruta y verificaremos si esa fruta está en el diccionario. Si\n",
    "la fruta está en el diccionario, mostraremos el precio al usuario. Si la fruta no está en\n",
    "el diccionario, le diremos al usuario que no se encuentra esa fruta en nuestra tienda."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b4e6e73b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#definiremos el catalogo vacio (diccionario)\n",
    "catalogo_frutas = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "301a57c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Agregar algunas frutas con sus precios al diccionario\n",
    "catalogo_frutas['manzana'] = 2.000\n",
    "catalogo_frutas['banana'] = 1.500\n",
    "catalogo_frutas['uva'] = 3.000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "deb99155",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingrese el nombre de una fruta: pera\n",
      "pera no se encuentra en nuestra tienda.\n"
     ]
    }
   ],
   "source": [
    "# Solicitar al usuario que ingrese el nombre de una fruta\n",
    "fruta_ingresada = input(\"Ingrese el nombre de una fruta: \")\n",
    "# Verificar si la fruta está en el diccionario\n",
    "if fruta_ingresada in catalogo_frutas:\n",
    "    # Mostrar el precio de la fruta al usuario\n",
    "    precio_fruta = catalogo_frutas[fruta_ingresada]\n",
    "    print(f\"El precio de {fruta_ingresada} es: ${precio_fruta:.2f}\")\n",
    "else:\n",
    "    # Informar al usuario que la fruta no se encuentra en la tienda\n",
    "    print(f\"{fruta_ingresada} no se encuentra en nuestra tienda.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "43703078",
   "metadata": {},
   "source": [
    "# ejercicio 3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aac38e2",
   "metadata": {},
   "source": [
    " Bienvenido al casino\n",
    "En este juego, tienes que lanzar dos dados y el programa mostrará los valores\n",
    "obtenidos en cada dado y la suma de ambos valores. Debes generar dos números\n",
    "aleatorios entre 1 y 6 que representan los valores obtenidos en cada dado usando la\n",
    "librería random. Luego, el programa debe mostrar los valores obtenidos en cada\n",
    "dado y la suma de ambos valores en la pantalla.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "3b5861f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#para utilizar numeros random debemos importar la libreria Random\n",
    "import random\n",
    "#definiremos la funcion para lanzar los dados\n",
    "def lanzar_dados():\n",
    "# Generar dos números aleatorios entre 1 y 6 al igual que un dado\n",
    "    dado1 = random.randint(1, 6)\n",
    "    dado2 = random.randint(1, 6)\n",
    "# Calcular la suma de ambos valores\n",
    "    suma_dados = dado1 + dado2\n",
    "# Mostrar los valores obtenidos en cada dado y la suma\n",
    "    print(f\"Resultado del dado 1: {dado1}\")\n",
    "    print(f\"Resultado del dado 2: {dado2}\")\n",
    "    print(f\"Suma de ambos dados: {suma_dados}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b3be6e0c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resultado del dado 1: 2\n",
      "Resultado del dado 2: 6\n",
      "Suma de ambos dados: 8\n"
     ]
    }
   ],
   "source": [
    "lanzar_dados()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c38b43df",
   "metadata": {},
   "source": [
    "# ejercicio 4\n",
    "Calculadora de chocolate\n",
    "Crea un programa que calcule la cantidad de chocolate que puedes comer sin\n",
    "pasarte de tu límite diario de calorías. El programa debe preguntar al usuario su\n",
    "límite diario de calorías y la cantidad de calorías que tiene una porción de chocolate.\n",
    "Luego, debe calcular la cantidad máxima de chocolate que se puede comer sin\n",
    "exceder el límite diario de calorías y mostrarla en pantalla.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d2cba940",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingrese su límite diario de calorías: 2000\n"
     ]
    }
   ],
   "source": [
    "#primero le solicitamos al usuario que ingrese el limite de calorias diarias\n",
    "limite_calorias_diario = float(input(\"Ingrese su límite diario de calorías: \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "56d90e4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingrese la cantidad de calorías en una porción de chocolate: 1000\n"
     ]
    }
   ],
   "source": [
    "# Solicitar al usuario la cantidad de calorías en una porción de chocolate\n",
    "calorias_porcion_chocolate = float(input(\"Ingrese la cantidad de calorías en una porción de chocolate: \"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f4c7fcba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calcular la cantidad máxima de chocolate que se puede comer con una simple division\n",
    "max_chocolate = limite_calorias_diario / calorias_porcion_chocolate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "75598c93",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "el maximo de chocolates que puede comer es:  2.0\n"
     ]
    }
   ],
   "source": [
    "print(\"el maximo de chocolates que puede comer es: \",max_chocolate)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ec4217c1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
